@page "/borrows/create/{bookId:guid}"
@using BlazorApp2.Data.Models;
@using BlazorApp2.Data.Services.Auth;
@using BlazorApp2.Data.Services.Books;
@inject UserSession UserSession
@inject BookService BookService
@inject BorrowService BorrowService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<h3>BorrowCreate</h3>
@if(book!=null)
{
	<div class="card">
		<img src="@(book.ThumbnailUrl ?? "images/default-book.png")">
		<p>@book.Title</p>
		<p>@book.Author</p>
		<p>@book.Status</p>
		<InputSelect @bind-Value="day" class="form-control">
			<option value="1">1</option>
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
			<option value="6">6</option>
			<option value="7">7</option>
			<option value="8">8</option>
			<option value="9">9</option>
			<option value="10">10</option>
			<option value="11">11</option>
			<option value="12">12</option>
			<option value="13">13</option>
			<option value="14">14</option>
			<option value="15">15</option>
			<option value="16">16</option>
			<option value="17">17</option>
			<option value="18">18</option>
			<option value="19">19</option>
			<option value="20">20</option>
			<option value="21">21</option>
			<option value="22">22</option>
			<option value="23">23</option>
			<option value="24">24</option>
			<option value="25">25</option>
			<option value="26">26</option>
			<option value="27">27</option>
			<option value="28">28</option>
		</InputSelect>
		<button @onclick="HandleSubmit" disabled="@isUse">确定</button>
		<button @onclick="NaviToBack">取消</button>
		<script>
			window.goBack=function()
			{
			window.history.back();
			}
		</script>
	</div>
}
else
{
	<p>未找到该书籍</p>
}

@if (errorMessage != null)
{
	<div class="alert alert-danger mt-3">@errorMessage</div>
}
@code {
	[Parameter]
	public Guid BookId { get; set; }
	private Book book;
	private int day = 14;
	private string errorMessage;
	protected override async Task OnInitializedAsync()
	{
		var user = await UserSession.GetCurrentUser();
		if (user == null)
		{
			Navigation.NavigateTo("/login");
			return;
		}
		book = await BookService.GetBookById(BookId);
	}
	private bool isUse()
	{
		if (book.Status == "Available")
			return false;
		else
			return true;
	}
	private async Task HandleSubmit()
	{
		var user = await UserSession.GetCurrentUser();
		if(await BorrowService.BorrowBook(user.UserId, book.BookId, day))
		{
			await JSRuntime.InvokeVoidAsync("alert", "借阅成功！");
			await NaviToBack();
		}else
		{
			errorMessage = "借阅失败，请刷新页面";
		}
	}
	private async Task NaviToBack()
	{
		await JSRuntime.InvokeVoidAsync("goBack");
	}
}
