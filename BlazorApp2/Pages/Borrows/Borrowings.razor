@page "/borrows"
@using BlazorApp2.Data.Models;
@using BlazorApp2.Data.Services.Auth;
@using BlazorApp2.Data.Services.Books;
@inject UserSession UserSession
@inject BookService BookService
@inject BorrowService BorrowService
@inject NavigationManager Navigation;
<h3>Borrowings</h3>
<div class="card">
	@if(borrowings!=null)
	{
		<p>筛选状态:</p>
		<InputSelect @bind-Value="selstatus" class="form-control">
			<option value=@string.Empty>无</option>
			<option value="Borrowed">Borrowed</option>
			<option value="Returned">Returned</option>
			<option value="Overdue">Overdue</option>
			<option value="Lost">Lost</option>
		</InputSelect>
		@foreach(var bor in borrowings)
		{
			@if(bor.Status==selstatus||selstatus==string.Empty)
			{
				<div class="card">
					<div class="card-body">
						<p>
							借阅
							<a @onclick="(()=>NaviToDetail(bor))">
								<BlazorApp2.Pages.Books.BookNameReader Borrowing=@bor>
								</BlazorApp2.Pages.Books.BookNameReader>
							</a>
						</p>
						<p>
							BorrowDate:@bor.BorrowDate
						</p>
						<p>
							DueDate:@bor.DueDate
						</p>
						<p>
							Status:@bor.Status
						</p>
						<p>
							ReturnDate:
							@if(bor.ReturnDate!=null)
							{
								@bor.ReturnDate
							}
						</p>
						<p>
							FineAmount:@GetFine(bor)
						</p>
						@if(bor.Status=="Borrowed"||bor.Status=="Overdue")
						{
							<button @onclick="(()=>Return(bor.BorrowId))">立即归还</button>
							<button disabled="@true">报失</button>
						}
					</div>
				</div>
			}
		}
	}
</div>
@code {
	private List<Borrowing> borrowings;
	private string selstatus = string.Empty;
	protected override async Task OnInitializedAsync()
	{
		var user = await UserSession.GetCurrentUser();
		if (user == null)
		{
			Navigation.NavigateTo("/login");
			return;
		}
		borrowings = await BorrowService.GetUserBorrwing(user.UserId);
	}
	private decimal GetFine(Borrowing bor)
	{
		return BorrowService.ColFine(bor);
	}
	private async Task<string> GetBookName(Borrowing bor)
	{
		var book = await BookService.GetBookById(bor.BookId);
		return book.Title;
	}
	private async Task Return(Guid borId)
	{
		var user = await UserSession.GetCurrentUser();
		await BorrowService.ReturnBook(user.UserId,borId);
	}
	private void NaviToDetail(Borrowing bor)
	{
		Navigation.NavigateTo($"/books/details/{bor.BookId}");
	}
}
